// This Pine Scriptâ„¢ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=5
indicator("PD Arrays", overlay = true, max_bars_back = 5000, max_lines_count = 500, max_labels_count = 500, max_boxes_count = 500)
//=======Variables=======//
var table1 = table.new(position = position.top_right, columns = 4, rows = 6, border_width = 0,border_color = color.gray)

var label[] stHigh = array.new<label>()
var label[] itHigh = array.new<label>()
var label[] ltHigh = array.new<label>()
var label[] stLow = array.new<label>()
var label[] itLow = array.new<label>()
var label[] ltLow = array.new<label>()

var lineTrend = array.new_line()
//_showMedtod = input.bool(true, title = "show Medtod", inline = "0", group="Medtod")
_Last_BoS = input.bool(true, title = "show only: ", inline = "1", group="Trend / BOS")
_col_bos = input.int(5,title = "", minval=0, maxval=50, step=1, inline = "1", group="Trend / BOS")
_BoSColorbl = input.color(color.green, title = "Long", inline = "2", group="Trend / BOS")
_BoSStylebl = input.string ("Solid", "", options=["Solid", "Dashed", "Dotted"], inline = "2", group="Trend / BOS")
_BoSColorbr = input.color(color.red, title = "Short", inline = "3", group="Trend / BOS")
_BoSStylebr = input.string ("Solid", "", options=["Solid", "Dashed", "Dotted"], inline = "3", group="Trend / BOS")

_BoSStyleblS                  = _BoSStylebl=="Solid" ? line.style_solid : _BoSStylebl == "Dotted" ? line.style_dotted : line.style_dashed
_BoSStylebrS                  = _BoSStylebr=="Solid" ? line.style_solid : _BoSStylebr == "Dotted" ? line.style_dotted : line.style_dashed

var float hh  = 0.0
var float ll  = 0.0
var int ph = 0
var int pl = 0
var int eqll = 0
var int eqlh = 0
var string trend = "range"
var color trendcolor = color.gray
var posline  = array.new_int()
var poslineend  = array.new_int()

//#Bos
if stHigh.size() > 1 and stLow.size() > 1
    hh := label.get_y(stHigh.get(stHigh.size()-1))
    ll := label.get_y(stLow.get(stLow.size()-1))
    ph := label.get_x(stHigh.get(stHigh.size()-1))
    pl := label.get_x(stLow.get(stLow.size()-1))

    for i = array.size(stLow)-1 to 1 by 1
        if ph == label.get_x(stLow.get(i))
            eqll := label.get_x(stLow.get(i))
            break
        if ph > label.get_x(stLow.get(i))
            break
    for i = array.size(stHigh)-1 to 1 by 1
        if pl == label.get_x(stHigh.get(i))
            eqlh := label.get_x(stHigh.get(i))
            break
        if pl > label.get_x(stHigh.get(i))
            break
    if array.size(posline) == 0
        array.push(posline,0)

    if array.size(poslineend) == 0
        array.push(poslineend,0)

    if close[1] > hh and array.get(posline,0) != ph and ph != eqll
        trend := "bull"
        trendcolor := color.green
        array.push(posline,ph)
        array.push(poslineend,bar_index)
        array.push(lineTrend, line.new(ph,hh,bar_index,hh,xloc.bar_index,extend.none,_BoSColorbl,_BoSStyleblS,1))
        alert("Trend changed to bull", alert.freq_once_per_bar)
    if close[1] < ll and array.get(posline,0) != pl and pl != eqlh
        trend := "bear"
        trendcolor := color.red
        array.push(posline,pl)
        array.push(poslineend,bar_index)
        array.push(lineTrend, line.new(pl,ll,bar_index,ll,xloc.bar_index,extend.none,_BoSColorbr,line.style_solid,1))
        alert("Trend changed to bear", alert.freq_once_per_bar)
    if array.size(lineTrend) > _col_bos and _Last_BoS
        ln = array.shift(lineTrend)
        line.delete(ln)
    if array.size(posline) > 1
        array.shift(posline)
    if array.size(poslineend) > 1
        array.shift(poslineend)
//#endBos
_Last_Block = input.bool(true, title = "show only: ", inline = "1", group="Order Block")
_col_Block = input.int(5,title = "", minval=0, maxval=50, step=1, inline = "1", group="Order Block")
_BlockColorbl = input.color(color.rgb(76, 175, 80, 90), title = "Long", inline = "2", group="Order Block")
_Blocktextbl = input.string("ob", title = "", inline = "2", group="Order Block")
_BlockColorbr = input.color(color.rgb(175, 76, 76, 90), title = "SHORT", inline = "3", group="Order Block")
_Blocktextbr = input.string("ob", title = "", inline = "3", group="Order Block")

var OrderBlock = array.new_box()
var posboxOB  = array.new_int()
var int col_setap = 0
var int indOB = 0
var float OBtl = 0.0  //top
var float OBbl = 0.0  //top
var int FFBullob = 0  //full fill order Block
var int bord = 0
var int posbox = 0
var color bgOB = color.rgb(0, 0, 0, 90)
var string bgtext = " "
//#orderBlock
if array.size(posboxOB) == 0
    array.push(posboxOB,0)

if stHigh.size() > 1 and stLow.size() > 1
    col_setap := bar_index - array.get(posline,0)
    OBtl := 0
    FFBullob := bar_index
    for i = bar_index - array.get(poslineend,0) to col_setap by 1
        if open[i] > close[i] and trend == "bull"// SHORT true
            if high[i] < high[col_setap] // lower then last Fractals
                OBtl := high[i]
                OBbl := low[i]
                indOB := bar_index - i
                bord := 0
                bgOB := _BlockColorbl
                bgtext := _Blocktextbl
                break
        if open[i] < close[i] and trend == "bear"// LONG true
            if low[i] > low[col_setap]
                OBtl := high[i]
                OBbl := low[i]
                indOB := bar_index - i
                bord := 0
                bgOB := _BlockColorbr
                bgtext := _Blocktextbr
                break
    if OBtl != 0
        for i = 0 to bar_index - array.get(poslineend,0) by 1
            if OBbl < close[i] and trend == "bull"
                FFBullob := bar_index - i
                break
            if OBtl > close[i] and trend == "bear"
                FFBullob := bar_index - i
                break
        array.push(posboxOB,array.get(posline,0))
        array.push(OrderBlock, box.new(indOB, OBtl, FFBullob, OBbl, xloc = xloc.bar_index,border_width = bord, bgcolor = bgOB, text = bgtext, text_halign = text.align_right, text_valign = text.align_center, text_wrap = text.wrap_none, text_size = size.small, text_color = color.rgb(0,0,0,70)))
        alert("Order block created", alert.freq_once_per_bar)
        if array.size(OrderBlock) >= 2
            if box.get_left(array.get(OrderBlock, array.size(OrderBlock)-2)) == box.get_left(array.get(OrderBlock, array.size(OrderBlock)-1))
                box.delete(array.get(OrderBlock,array.size(OrderBlock)-2))
                array.remove(OrderBlock, array.size(OrderBlock)-2)
            else
                box.set_bgcolor(array.get(OrderBlock, array.size(OrderBlock)-2), color.rgb(0,0,0,97))
//                box.set_right(array.get(OrderBlock, array.size(OrderBlock)-2),array.get(posline,0))
        if array.get(posboxOB,array.size(posboxOB)-2) == array.get(posboxOB,array.size(posboxOB)-1)
            array.shift(posboxOB)

    if (array.size(OrderBlock) > _col_Block and _Last_Block) or (array.size(OrderBlock) > 50 and _Last_Block == false)
        bd = array.shift(OrderBlock)
        box.delete(bd)
//#endorderBlock
//#Table
//#sweep
_Last_Sweep = input.bool(true, title = "show only: ", inline = "1", group="Sweep")
_col_Sweep = input.int(5,title = "", minval=0, maxval=50, step=1, inline = "1", group="Sweep")
_show_long = input.bool(true, title = "show long: ", inline = "2", group="Sweep")
_show_short = input.bool(true, title = "show short: ", inline = "2", group="Sweep")
var linesweep = array.new_line()
var float sweepH = 0.0
var float sweepL = 0.0
var int sweeptrue = 1

var int SweepPs = 0
var int SweepPe = 0
if stHigh.size() > 1 and stLow.size() > 1
    sweepH := label.get_y(stHigh.get(stHigh.size()-1))
    sweepL := label.get_y(stLow.get(stLow.size()-1))
    SweepPs := label.get_x(stHigh.get(stHigh.size()-1))
    SweepPe := label.get_x(stLow.get(stLow.size()-1))
    sweeptrue := 0
    if open[1] > sweepL and close[1] > sweepL and low[1] < sweepL and trend == "bull"
        sweeptrue := bar_index+1
    if open[1] < sweepH and close[1] < sweepH and high[1] > sweepH and trend == "bear"
        sweeptrue := bar_index+1

    if trend == "bull" and sweeptrue != 0 and _show_long
        array.push(linesweep, line.new(SweepPe,sweepL,sweeptrue,sweepL,xloc.bar_index,extend.none,width = 1,color = color.black,style = line.style_dotted))
        if array.size(linesweep) > 2
            if line.get_x1(array.get(linesweep, array.size(linesweep)-1)) == line.get_x1(array.get(linesweep, array.size(linesweep)-2))
                line.delete(array.get(linesweep, array.size(linesweep)-2))
                array.remove(linesweep, array.size(linesweep)-2)
    if trend == "bear" and sweeptrue != 0 and _show_short
        array.push(linesweep, line.new(SweepPs,sweepH,sweeptrue,sweepH,xloc.bar_index,extend.none,width = 1,color = color.black,style = line.style_dotted))
        if array.size(linesweep) > 2
            if line.get_x1(array.get(linesweep, array.size(linesweep)-1)) == line.get_x1(array.get(linesweep, array.size(linesweep)-2))
                line.delete(array.get(linesweep, array.size(linesweep)-2))
                array.remove(linesweep, array.size(linesweep)-2)


    if array.size(linesweep) > _col_Sweep and _Last_Sweep
        lnsw = array.shift(linesweep)
        line.delete(lnsw)
//#sweepend
//#FVG
_Last_fvg = input.bool(true, title = "show only: ", inline = "1", group="FVG")
_col_fvg = input.int(5,title = "", minval=0, maxval=50, step=1, inline = "1", group="FVG")
_fvgColorbl = input.color(color.rgb(76, 175, 80, 90), title = "Long", inline = "2", group="FVG")
_fvgtextbl = input.string("fvg", title = "", inline = "2", group="FVG")
_fvgColorbr = input.color(color.rgb(175, 76, 76, 90), title = "SHORT", inline = "3", group="FVG")
_fvgtextbr = input.string("fvg", title = "", inline = "3", group="FVG")

var FVGbox = array.new_box()
var string bgtextfvg = ""
var color bgfvg = color.rgb(0,0,0,90)
var float fvg_high = 0.0
var float fvg_low = 0.0
if stHigh.size() > 1 and stLow.size() > 1
    if trend == "bull"
        fvg_high := low[1]
        fvg_low := high[3]
        bgtextfvg := _fvgtextbl
        bgfvg := _fvgColorbl
    else if trend == "bear"
        fvg_high := low[3]
        fvg_low := high[1]
        bgtextfvg := _fvgtextbr
        bgfvg := _fvgColorbr
    if fvg_high > fvg_low
        array.push(FVGbox, box.new(bar_index-2, fvg_high, bar_index, fvg_low, xloc = xloc.bar_index,border_width = bord, bgcolor = bgfvg, text = bgtextfvg, text_halign = text.align_right, text_valign = text.align_center, text_wrap = text.wrap_none, text_size = size.small, text_color = color.rgb(0,0,0,70)))
        if array.size(FVGbox) >= 2
            if box.get_left(array.get(FVGbox, array.size(FVGbox)-2)) == box.get_left(array.get(FVGbox, array.size(FVGbox)-1))
                box.delete(array.get(FVGbox,array.size(FVGbox)-2))
                array.remove(FVGbox, array.size(FVGbox)-2)
    if (array.size(FVGbox) > _col_fvg and _Last_fvg) or (array.size(FVGbox) > 50 and _Last_fvg == false)
        fvgdel = array.shift(FVGbox)
        box.delete(fvgdel)
//#FVGend
if stHigh.size() > 3
    table.clear(table1,0,0,3,5)
 // row 0
    table.cell(table_id = table1, column = 0, row = 0, text = "Trend",text_color = color.gray)
    table.cell(table_id = table1, column = 1, row = 0, text = trend,text_color = trendcolor)
    table.cell(table_id = table1, column = 2, row = 0, text = str.tostring(" "),text_color = color.gray)
 // row 1
    table.cell(table_id = table1, column = 0, row = 1, text = " ",text_color = color.gray)
    table.cell(table_id = table1, column = 1, row = 1, text = str.tostring(" "),text_color = color.green)
    table.cell(table_id = table1, column = 2, row = 1, text = str.tostring(" "),text_color = color.red)
 // row 2
    table.cell(table_id = table1, column = 0, row = 2, text = " ",text_color = color.gray)
    table.cell(table_id = table1, column = 1, row = 2, text = str.tostring(" "),text_color = color.gray)
    table.cell(table_id = table1, column = 2, row = 2, text = str.tostring(" "),text_color = color.orange)
 // row = 3
    table.cell(table_id = table1, column = 0, row = 3, text = "",text_color = color.gray)
    table.cell(table_id = table1, column = 1, row = 3, text = "",text_color = color.gray)
    table.cell(table_id = table1, column = 2, row = 3, text = "",text_color = color.gray)
//#endTable
//#region[Inputs]
_showST = input.bool(true, title = "Short Term", inline = "1", group="Fractals")
_stColor = input.color(color.black, "", inline = "1", group="Fractals")
_showIT = input.bool(true, title = "Intermediate Term", inline = "2", group="Fractals")
_itColor = input.color(color.orange, "", inline = "2", group="Fractals")
_showLT = input.bool(true, title = "Long Term", inline = "3", group="Fractals")
_ltColor = input.color(color.green, "", inline = "3", group="Fractals")
//#endregion

//#region[Functions and Methods]
method oldSwing(array<label> a, type) =>
    if type == "high"
        label.get_y(a.get(a.size()-1)) < label.get_y(a.get(a.size()-2)) and
         label.get_y(a.get(a.size()-2)) > label.get_y(a.get(a.size()-3))

    else if type == 'low'
        label.get_y(a.get(a.size()-1)) > label.get_y(a.get(a.size()-2)) and
         label.get_y(a.get(a.size()-2)) < label.get_y(a.get(a.size()-3))


ict_SwingStructure(array<label> stA, bool showST,
                   array<label> itA, bool showIT,
                   array<label> ltA, bool showLT,
                   type) =>
    color cNONE = color.new(color.white, 100)
    int swing   = na
    float price = na
    string lbl  = na
    string _yloc = na
    string lblText = ""


    if type == "high"
        swing := ta.highestbars(3)
        price := high[1]
        lbl   := label.style_label_down
        lblText := "â–¼"
        _yloc := yloc.price
    else if type == "low"
        swing := ta.lowestbars(3)
        price := low[1],
        lblText := "â–²"
        lbl   := label.style_label_up
        _yloc := yloc.price

    if swing == -1
        stA.push(label.new(bar_index-1, price, lblText, color = cNONE, style = lbl, yloc = _yloc, textcolor = showST ? _stColor : na, size= size.tiny))

    if stA.size() > 2
        if stA.oldSwing(type)
            it = label.copy(stA.get(stA.size()-2))
            label.set_textcolor(it, showIT ? _itColor : na)
            if not(itA.size() > 0)
                itA.push(it)
            else if label.get_y(itA.get(itA.size()-1)) != label.get_y(it)
                itA.push(it)

    if itA.size() > 2
        if itA.oldSwing(type)
            lt = label.copy(itA.get(itA.size()-2))
            label.set_textcolor(lt, showLT ? _ltColor : na)
            if not(ltA.size() > 0)
                ltA.push(lt)
            else if label.get_y(ltA.get(ltA.size()-1)) != label.get_y(lt)
                ltA.push(lt)

ict_SimpleMarketStructure(array<label> stH, array<label> stL, bool showST,
                          array<label> itH, array<label> itL, bool showIT,
                          array<label> ltH, array<label> ltL, bool showLT) =>

    ict_SwingStructure(stH, showST,
                       itH, showIT,
                       ltH, showLT,
                       "high")
    ict_SwingStructure(stL, showST,
                       itL, showIT,
                       ltL, showLT,
                       "low")

//#endregion

ict_SimpleMarketStructure(stHigh, stLow, _showST,
                          itHigh, itLow, _showIT,
                          ltHigh, ltLow, _showLT)
//#endregion
//====================================================//
